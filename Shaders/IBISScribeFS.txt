#extension GL_ARB_texture_rectangle : enable
#extension GL_ARB_draw_buffers : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler2DRectShadow depthBuffer;
uniform sampler2DRect infoBuffer;
uniform int layer;
uniform int objectId;

varying vec3 normal;
varying vec4 color;
varying float depthInCamera;

// Prototypes from LibUtility
float setBit(float byte, int bit, bool on);
bool getBit(float byte, int bit);
vec2 packFloat2(float depth);

// Shader main function
void main() {
	vec4 r0 = gl_FragCoord;
	vec4 col = color;

	// Depth peeling
	if (layer > 0) {
		float r1 = shadow2DRect(depthBuffer, r0.xyz).x;
		r1 = r1 - 0.5;
		if (r1 < 0.0) { discard; }
	}

	// Get the previous info buffer
	vec4 prevInfo = vec4(0.0);
	if (layer > 0) {
		prevInfo = texture2DRect(infoBuffer, r0.xy);
	}

	// Coplanarity peeling
	if (getBit(prevInfo.y, objectId) == gl_FrontFacing) {
		discard;
	}

	// Encode identity
	float id = float(objectId) + 1.0;
	if (id < 0.0) id = 0.0;
	float identity = id / 9.0;
	// Encode in-out mask
	float inOutMask = prevInfo.y;
	if (objectId >= 0) {
		inOutMask = setBit(inOutMask, objectId, gl_FrontFacing);
	}
	// Encode depth
	vec2 depthVec = packFloat2(depthInCamera);
	// Encode normal
	vec3 n = (normalize(normal) + vec3(1.0)) / 2.0;
	// Store data
	gl_FragData[0] = col;
	gl_FragData[1] = vec4(n, 1.0);
	gl_FragData[2] = vec4(identity, inOutMask, depthVec);
}
