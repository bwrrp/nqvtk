#extension GL_ARB_texture_rectangle : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler2DRect infoPrevious;
uniform sampler2DRect infoCurrent;
uniform sampler2DRect normals;
uniform sampler2DRect colors;

uniform int layer;
uniform float viewportX;
uniform float viewportY;

uniform sampler3D volume[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataShift[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataScale[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeOrigin[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSize[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSpacing[NQVTK_RAYCASTER_VOLUMECOUNT];

// Prototypes from LibUtility
vec3 phongShading(vec3 matColor, vec3 normal);
bool getBit(float byte, int bit);
float setBit(float byte, int bit, bool on);

void main() {
	// Get info
	vec4 r0 = gl_FragCoord;
	r0.x -= viewportX;
	r0.y -= viewportY;
	vec4 infoBefore = texture2DRect(infoPrevious, r0.xy);
	vec4 infoAfter = texture2DRect(infoCurrent, r0.xy);
	vec4 normalid = texture2DRect(normals, r0.xy);
	vec3 normal = normalize(normalid.rgb);
	float gm = length(normalid.rgb);
	float id = normalid.a;
	vec4 color = texture2DRect(colors, r0.xy);

	// Discard background
	if (length(infoAfter) == 0.0) discard;

	// TODO: implement raycasting.

	vec4 info = infoAfter;
	
	// Test: sphere
	vec3 ray = infoAfter.xyz - infoBefore.xyz;
	float l = length(ray);
	ray = normalize(ray);
	vec3 dst = infoBefore.xyz;
	float B = dot(dst, ray);
	float C = dot(dst, dst) - 25.0;
	float D = B * B - C;
	if (D > 0.0) {
		float D = -B - sqrt(D);
		if (D < l) {
			// Intersection
			vec3 p = infoBefore.xyz + D * ray;
			vec3 n = normalize(p);
			bool facing = dot(n, ray) < 0;
			if (getBit(infoBefore.a, 2) != facing) {
				normalid = vec4(gl_NormalMatrix * n, normalid.a);
				info = vec4(p, info.a);
				color = vec4(vec3(1.0), 0.3);
				info = infoBefore;
				info.a = setBit(info.a, 2, facing);
			}
		}
	}

	// Fill the infobuffer
	gl_FragData[0] = info;
	gl_FragData[1] = normalid;
	gl_FragData[2] = color;
}
