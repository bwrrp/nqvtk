#extension GL_ARB_texture_rectangle : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler2DRect infoPrevious;
uniform sampler2DRect infoCurrent;
uniform sampler2DRect normals;
uniform sampler2DRect colors;

uniform int layer;
uniform float viewportX;
uniform float viewportY;

uniform sampler3D volume[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataShift[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataScale[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeOrigin[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSize[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSpacing[NQVTK_RAYCASTER_VOLUMECOUNT];

uniform float tfStart[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float tfEnd[NQVTK_RAYCASTER_VOLUMECOUNT];

uniform float stepSize;
uniform float kernelSize;

// Prototypes from LibUtility
vec3 phongShading(vec3 matColor, vec3 normal);
bool getBit(float byte, int bit);
float setBit(float byte, int bit, bool on);

float getValue(int v, vec3 pos) {
	vec4 tpos = gl_TextureMatrixInverse[v] * vec4(pos, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[v]) / volumeSize[v];
	return texture3D(volume[v], p).x;
}

// Compute gradient of the volume
vec3 computeGradient(int v, vec3 pos, float delta, float val) {
#ifdef NQVTK_RAYCASTER_CENTRALDIFFERENCES
	float dx = (getValue(v, pos + vec3(0.5 * delta, 0.0, 0.0)) - 
		getValue(v, pos - vec3(0.5 * delta, 0.0, 0.0))) / delta;
	float dy = (getValue(v, pos + vec3(0.0, 0.5 * delta, 0.0)) - 
		getValue(v, pos - vec3(0.0, 0.5 * delta, 0.0))) / delta;
	float dz = (getValue(v, pos + vec3(0.0, 0.0, 0.5 * delta)) - 
		getValue(v, pos - vec3(0.0, 0.0, 0.5 * delta))) / delta;
#else
	float dx = (getValue(v, pos + vec3(delta, 0.0, 0.0)) - val) / delta;
	float dy = (getValue(v, pos + vec3(0.0, delta, 0.0)) - val) / delta;
	float dz = (getValue(v, pos + vec3(0.0, 0.0, delta)) - val) / delta;
#endif
	return vec3(dx, dy, dz);
}

vec3 refineHitpoint(int v, vec3 pos, vec3 step, float isoval, bool belowAtPos) {
	vec3 s = 0.5 * step;
	vec3 p = pos - s;
	// 6 refinements should be enough for now
	for (int r = 0; r < 6; ++r) {
		float val = getValue(v, p);
		// Halve the step size
		s *= 0.5;
		// Step in which direction?
		if ((val < isoval) == belowAtPos) {
			p -= s;
		} else {
			p += s;
		}
	}
	return p;
}

void main() {
	// Get info
	vec4 r0 = gl_FragCoord;
	r0.x -= viewportX;
	r0.y -= viewportY;
	vec4 infoBefore = texture2DRect(infoPrevious, r0.xy);
	vec4 infoAfter = texture2DRect(infoCurrent, r0.xy);
	vec4 normalid = texture2DRect(normals, r0.xy);
	vec3 normal = normalize(normalid.rgb);
	float gm = length(normalid.rgb);
	float id = normalid.a;
	vec4 color = texture2DRect(colors, r0.xy);

	// Discard background
	if (length(infoAfter) == 0.0) discard;

	// Should be set to infoBefore if raycasting hits a surface
	vec4 info = infoAfter;

	// Raycast into the slab
	vec3 startPos = infoBefore.rgb;
	vec3 endPos = infoAfter.rgb;
	vec3 ray = endPos - startPos;

	// Determine step, number of steps
	vec3 step = normalize(ray) * stepSize;
	float stepLength = stepSize;
	int numSteps = int(ceil(length(ray) / stepSize));

	// Start raycasting
	vec3 pos = startPos + step * 0.5;
	bool firstSample = true;
	float firstVal = 0.0;
	bool belowAtStart = false;
	bool done = false;
	// For each step along the ray...
	for (int i = 0; i < numSteps + 1 && !done; ++i) {
		for (int v = 0; v < NQVTK_RAYCASTER_VOLUMECOUNT && !done; ++v) {
			// If the volume is active, sample it
			if (getBit(infoBefore.a, v)) {
				float val = getValue(v, pos);
				if (firstSample) {
					// The first sample can never hit a surface
					// TODO: we may want to use the in-out mask for this
					firstVal = val;
					firstSample = false;
					belowAtStart = (firstVal < tfStart[v]);
				} else {
					bool belowAtPos = (val < tfStart[v]);
					if (belowAtPos != belowAtStart) {
						// Found an isosurface
						done = true;
						id = float(v + 2);
						// TODO: if multiple volumes hit an isosurface, 
						//       check which is first by refinement
						pos = refineHitpoint(v, pos, step, tfStart[v], belowAtPos);
						// TODO: Check in-out mask for earlier intersections with this surface
						info = vec4(pos, setBit(infoBefore.a, id, !belowAtPos));
						color = vec4(vec3(1.0), 0.6);
						// Compute normal
						// TODO: replace with kernel / spline-based method?
						normal = computeGradient(v, pos, kernelSize, getValue(pos, v));
						if (belowAtStart) normal = -normal;
						normal = gl_NormalMatrix * normal;
					}
				}
			}
		}

		// The last step should stay within the slab
		if (i == numSteps) {
			step = endPos - pos;
			stepLength = length(step);
		}
		// Step along the ray
		pos += step;
	}

	// Fill the infobuffer
	gl_FragData[0] = info;
	gl_FragData[1] = vec4(normal, id);
	gl_FragData[2] = color;
}
