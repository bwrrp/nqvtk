#extension GL_ARB_texture_rectangle : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler2DRect infoPrevious;
uniform sampler2DRect infoCurrent;
uniform int layer;
uniform float viewportX;
uniform float viewportY;
uniform vec3 cameraPos;

uniform sampler3D volume[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataShift[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataScale[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeOrigin[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSize[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSpacing[NQVTK_RAYCASTER_VOLUMECOUNT];

uniform sampler3D noiseVol;

// Transfer functions
uniform float tfStart[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float tfEnd[NQVTK_RAYCASTER_VOLUMECOUNT];

// Interest functions
uniform float focusIFStart;
uniform float focusIFEnd;
uniform float staticIFStart;
uniform float staticIFEnd;
uniform float dynamicIFStart;
uniform float dynamicIFEnd;

uniform float smearTFStart;
uniform float smearTFEnd;
uniform float smearDensity;
uniform float smearLength;

// Raycasting parameters
uniform float stepSize;
uniform float kernelSize;

uniform float testParam;

// Prototypes from LibUtility
bool getBit(float byte, int bit);
vec3 phongShading(vec3 matColor, vec3 normal);

// Get vector from volume
vec3 getVector(int v, vec3 pos) {
	vec4 tpos = gl_TextureMatrixInverse[v] * vec4(pos, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[v]) / volumeSize[v];
	return vec3(volumeDataShift[v]) + volumeDataScale[v] * texture3D(volume[v], p).xyz;
}

// Get raw value from volume (scaled / shifted to 0..1)
float getRawValue(int v, vec3 pos) {
	vec4 tpos = gl_TextureMatrixInverse[v] * vec4(pos, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[v]) / volumeSize[v];
	return texture3D(volume[v], p).x;
}

// Get actual value from volume
float getValue(int v, vec3 pos) {
	return volumeDataShift[v] + volumeDataScale[v] * getRawValue(v, pos);
}

// Sample the noise volume
float getNoise(vec3 pos, float density) {
	vec4 tpos = gl_TextureMatrixInverse[0] * vec4(pos, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[0]) / volumeSize[0];
	return texture3D(noiseVol, mod(p * density, 1.0)).x;
}

// Gaussian kernel Jacobian
mat3 gaussianJacobian(int v, vec3 pos, float delta, vec3 val) {
	// TODO: kernelSize should be in world-space coords, not voxels
	float mini = floor(-2.0 * delta);
	float maxi = ceil(2.0 * delta);
	vec3 scale = vec3(delta) / volumeSpacing[v];
	vec3 f1 = 1.0 / (scale * 1.4142135623731);
	vec3 f2 = 1.0 / (scale * 2.506628274631); //sqrt(6.28318530717959)
	vec3 f3 = -1.0 / (2.0 * scale * scale);
	// TODO: this should be a 3D Gaussian derivative, not three 1D Gaussians
	// Find out the formula for that...
	vec3 dx = vec3(0.0);
	vec3 dy = vec3(0.0);
	vec3 dz = vec3(0.0);
	for (float i = mini; i < maxi + 1.0; ++i) {
		float j = -i;
		vec3 g = -f1 * (2.0 * j * f1) * f2 * exp(j * j * f3);
		dx += g.x * getVector(v, pos + vec3(i * volumeSpacing[v].x, 0.0, 0.0));
		dy += g.y * getVector(v, pos + vec3(0.0, i * volumeSpacing[v].y, 0.0));
		dz += g.z * getVector(v, pos + vec3(0.0, 0.0, i * volumeSpacing[v].z));
	}
	return mat3(dx, dy, dz) + mat3(1.0);
}

// Linear Jacobian
mat3 linearJacobian(int v, vec3 pos, float delta, vec3 val) {
#ifdef NQVTK_RAYCASTER_CENTRALDIFFERENCES
	vec3 dx = (getVector(v, pos + vec3(0.5 * delta, 0.0, 0.0)) - 
		getVector(v, pos - vec3(0.5 * delta, 0.0, 0.0))) / delta;
	vec3 dy = (getVector(v, pos + vec3(0.0, 0.5 * delta, 0.0)) - 
		getVector(v, pos - vec3(0.0, 0.5 * delta, 0.0))) / delta;
	vec3 dz = (getVector(v, pos + vec3(0.0, 0.0, 0.5 * delta)) - 
		getVector(v, pos - vec3(0.0, 0.0, 0.5 * delta))) / delta;
#else
	vec3 dx = (getVector(v, pos + vec3(delta, 0.0, 0.0)) - val) / delta;
	vec3 dy = (getVector(v, pos + vec3(0.0, delta, 0.0)) - val) / delta;
	vec3 dz = (getVector(v, pos + vec3(0.0, 0.0, delta)) - val) / delta;
#endif
	// Add identity (because we should have used pos + vec instead of vec)
	return mat3(dx, dy, dz) + mat3(1.0);
}

// Compute determinant of matrix
float determinant(mat3 m) {
	return m[0][0] * m[1][1] * m[2][2] 
		+ m[0][1] * m[1][2] * m[2][0] 
		+ m[0][2] * m[1][0] * m[2][1] 
		- m[0][2] * m[1][1] * m[2][0] 
		- m[0][1] * m[1][0] * m[2][2] 
		- m[0][0] * m[1][2] * m[2][1];
}

// Compute gradient of a scalar volume
vec3 linearRawScalarGradient(int v, vec3 pos, float delta, float val) {
#ifdef NQVTK_RAYCASTER_CENTRALDIFFERENCES
	float dx = (getRawValue(v, pos + vec3(0.5 * delta, 0.0, 0.0)) - 
		getRawValue(v, pos - vec3(0.5 * delta, 0.0, 0.0))) / delta;
	float dy = (getRawValue(v, pos + vec3(0.0, 0.5 * delta, 0.0)) - 
		getRawValue(v, pos - vec3(0.0, 0.5 * delta, 0.0))) / delta;
	float dz = (getRawValue(v, pos + vec3(0.0, 0.0, 0.5 * delta)) - 
		getRawValue(v, pos - vec3(0.0, 0.0, 0.5 * delta))) / delta;
#else
	float dx = (getRawValue(v, pos + vec3(delta, 0.0, 0.0)) - val) / delta;
	float dy = (getRawValue(v, pos + vec3(0.0, delta, 0.0)) - val) / delta;
	float dz = (getRawValue(v, pos + vec3(0.0, 0.0, delta)) - val) / delta;
#endif
	return vec3(dx, dy, dz);
}

// Adjust opacity for step length
float adjustOpacity(float val, float stepLength) {
	return 1.0 - pow(1.0 - val, stepLength);
}

float subrange(float val, float start, float end) {
	// Apply the volume's focus function
	float size = max(end - start, 0.00001);
	return clamp((val - start) / size, 0.0, 1.0);
}

vec3 streamlineShading(vec3 matColor, vec3 lineDir, vec3 position) {
	// Get to-eye vector
	vec3 toEye = normalize(cameraPos - position);
	// Get streamline normal
	vec3 streamlineNormal = toEye - abs(dot(toEye, lineDir)) * lineDir;
	// Compute lighting
	return phongShading(matColor, gl_NormalMatrix * streamlineNormal);
}

vec4 stripeTexture(vec3 vector, vec3 position, vec3 normal) {
	// Perpendicularness
	vec3 direction = normalize(vector);
	float f = abs(dot(direction, normal));
	vec3 stripecolor = f * vec3(1.0, 0.5, 0.0) + (1.0 - f) * vec3(0.0, 0.5, 1.0);
	// Magnitude
	float mag = clamp(
		length(vector / (volumeDataShift[0] + volumeDataScale[0])) * 1.25, 
		0.0, 1.0);
	stripecolor *= mag;
	// Striping
	vec4 tpos = gl_TextureMatrixInverse[0] * vec4(position, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[0]) / volumeSize[0];
	vec3 n = normal;
	// Instead of the noisy tangent plane, we project to the nearest axis-plane
	if (abs(n.x) > abs(n.y))
		if (abs(n.x) > abs(n.z))
			n = vec3(1.0, 0.0, 0.0);
		else
			n = vec3(0.0, 0.0, 1.0);
	else
		if (abs(n.y) > abs(n.z))
			n = vec3(0.0, 1.0, 0.0);
		else
			n = vec3(0.0, 0.0, 1.0);
	direction = direction - dot(direction, n) * n;
	vec3 v2 = cross(direction, n);
	float f2 = dot(p, v2);
	float stripe = mod(f2 * 20.0, 1.0);
	// TODO: smoothstep this
	if (stripe > 0.5) 
		stripe = 1.0;
	else
		stripe = 0.0;
	return vec4(stripecolor, stripe);
}

struct Mode {
	float importance;
	vec3 color;
	float opacity;
	vec3 normal;
};

// Main shader function
void main() {
	// Get info
	vec4 r0 = gl_FragCoord;
	r0.x -= viewportX;
	r0.y -= viewportY;
	vec4 infoBefore = texture2DRect(infoPrevious, r0.xy);
	vec4 infoAfter = texture2DRect(infoCurrent, r0.xy);
	// No volumes to render in front of first layer
	if (layer == 0) discard;

	// Discard background
	if (length(infoAfter) == 0.0) discard;

	// Raycast this slab
	vec3 startPos = infoBefore.rgb;
	vec3 endPos = infoAfter.rgb;
	vec3 ray = endPos - startPos;

#ifdef NQVTK_RAYCASTER_DITHERPOS
	// Offset rays to reduce stepping artifacts
	float offset = abs(mod(r0.y, 4.0) - mod(r0.x, 4.0)) * 0.25 * stepSize;
	startPos += offset * normalize(ray);
#endif

	// Determine step, number of steps
	vec3 step = normalize(ray) * stepSize;
	float stepLength = stepSize;
	int numSteps = int(ceil(length(ray) / stepSize));

	// Determine active volumes
	bool active[NQVTK_RAYCASTER_VOLUMECOUNT];
	for (int v = 0; v < NQVTK_RAYCASTER_VOLUMECOUNT; ++v) {
		active[v] = getBit(infoBefore.a, v);
	}

	// Start tracing
	vec4 accum = vec4(vec3(0.0), 1.0);
	vec3 pos = startPos;

	// For each step along the ray...
	for (int i = 0; i < numSteps + 1; ++i) {
		// Information recorded for later stages
		vec3 vector = getVector(0, pos);
		float deformation = length(
			vector / (volumeDataScale[0] + volumeDataShift[0])) / 
			length(vec3(1.0));

		// Visualization modes
		Mode focus = Mode(0.0, vec3(0.0), 0.0, vec3(0.0));
		Mode dynamicContext = Mode(0.0, vec3(0.0), 0.0, vec3(0.0));
		Mode staticContext = Mode(0.0, vec3(0.0), 0.0, vec3(0.0));

#if defined NQVTK_DEFORMATION_FOCUS || defined NQVTK_DEFORMATION_DYNAMIC_VOLUME
		// Volume 0 is our vector volume
		if (active[0]) {
			// Focus visualization
			mat3 jacobian = linearJacobian(0, pos, kernelSize, vector);
			float detJacobian = abs(determinant(jacobian));
			// TODO: make sure growth and shrinkage are symmetrical
			float growth = 0.0;
			if (detJacobian > 1.0) 
				growth = 1.0 - (1.0 / detJacobian);
			else
				growth = detJacobian - 1.0;
			float value = abs(growth);
#ifdef NQVTK_DEFORMATION_FOCUS
			// TODO: use separate interest function & transfer function
			focus.importance = subrange(value, focusIFStart, focusIFEnd);
			focus.color = (growth > 0.0) ? vec3(0.3, 0.6, 1.0) : vec3(1.0, 0.9, 0.4);
			focus.opacity = subrange(value, tfStart[0], tfEnd[0]);
			focus.color *= focus.opacity;
#if defined NQVTK_DEFORMATION_TEXTURING || defined NQVTK_RAYCASTER_LIGHTING
			// TODO: compute surface normal for texturing / lighting
			focus.normal = vec3(0.0);
#endif
#endif
#ifdef NQVTK_DEFORMATION_DYNAMIC_VOLUME
			// Compute smear
			value = 0.0;
			int n = 0;
			for (float i = 0.0; i <= smearLength * length(vector); i += stepSize) {
				n++;
				vec3 smearpos = pos + i * normalize(vector);
				float noise = getNoise(smearpos, smearDensity);
				noise = noise > 0.8 ? noise : 0.0;
				//noise = pow(noise, 2.0);
				value += noise;
			}
			value /= float(n);
			value = clamp(value, 0.0, 1.0);

			dynamicContext.importance = subrange(deformation, dynamicIFStart, dynamicIFEnd);
			dynamicContext.color = vec3(1.0, 0.5, 0.0);
			dynamicContext.opacity = subrange(value, smearTFStart, smearTFEnd) * 
				dynamicContext.importance;
			// Apply streamline shading
			dynamicContext.color = streamlineShading(
				dynamicContext.color, normalize(vector), pos);
#endif
		}
#endif

		// Adjust pos for volume morphing
		// TODO: adjust for the transformation of the vector field?
		vec3 deformedPos = pos + (testParam - 0.5) * 4.0 * vector;
#ifdef NQVTK_DEFORMATION_MORPHING
		vec3 position = deformedPos;
#else
		vec3 position = pos;
#endif

#if defined NQVTK_DEFORMATION_STATIC || defined NQVTK_DEFORMATION_DYNAMIC_CONTOURS
		// The other volumes are scalar volumes
		for (int v = 1; v < NQVTK_RAYCASTER_VOLUMECOUNT; ++v) {
			if (active[v]) {
				// Static context / morphing
				float value1 = getRawValue(v, position);
				vec3 gradient1 = linearRawScalarGradient(v, position, kernelSize, value1);
				float gm1 = clamp(length(gradient1), 0.0, 1.0);
				float contourness1 = 1.0 - subrange(
					abs(dot(normalize(cameraPos - pos), gradient1)), 
					0.0, 0.1);
				value1 = contourness1 * gm1 * value1 * 5.0;

#ifndef NQVTK_DEFORMATION_MORPHING
				// Use dual contours
				float value2 = getRawValue(v, deformedPos);
				// TODO: this should be the gradient of the deformed volume!
				vec3 gradient2 = linearRawScalarGradient(v, deformedPos, kernelSize, value2);
				float gm2 = clamp(length(gradient2), 0.0, 1.0);
				// DUAL CONTEXT TEST
				float contourness2 = 1.0 - subrange(
					abs(dot(normalize(cameraPos - pos), gradient2)), 
					0.0, 0.1);
				value2 = contourness2 * gm2 * value2 * 5.0;
#ifdef NQVTK_DEFORMATION_STATIC
				// TODO: combine results from all volumes
				if (value1 >= value2) {
					staticContext.importance = subrange(value1, staticIFStart, staticIFEnd);
					staticContext.color = mix(vec3(0.0, 1.0, 0.5), vec3(0.65), contourness1);
					staticContext.opacity = subrange(value1, tfStart[v], tfEnd[v]);
					
				} else {
					staticContext.importance = subrange(value2, staticIFStart, staticIFEnd);
					staticContext.color = mix(vec3(1.0, 0.0, 0.5), vec3(0.65), contourness2);
					staticContext.opacity = subrange(value2, tfStart[v], tfEnd[v]);
				}
#endif
#else //NQVTK_DEFORMATION_MORPHING
#ifdef NQVTK_DEFORMATION_STATIC
				// TODO: combine results from all volumes
				staticContext.importance = subrange(value1, staticIFStart, staticIFEnd);
				staticContext.color = mix(vec3(0.0, 1.0, 0.5), vec3(0.65), contourness1);
				staticContext.opacity = subrange(value1, tfStart[v], tfEnd[v]);
#endif
#endif
				// Static context never uses lighting
#ifdef NQVTK_DEFORMATION_DYNAMIC_CONTOURS
				// TODO: secondary contours should be dynamic context!
#endif
			}
		} // for each scalar volume...
#endif

		// Determine most important mode
		vec3 color = vec3(0.0);
		float opacity = 0.0;
		if (focus.importance > staticContext.importance 
			&& focus.importance > dynamicContext.importance) {
			// Use focus mode
			color = focus.color;
			opacity = focus.opacity;

#ifdef NQVTK_DEFORMATION_TEXTURING
			if (length(vector) > 0.0 && length(focus.normal) > 0.0) {
				// Apply texture
				vec4 stripes = stripeTexture(vector, pos, focus.normal);
				color = stripes.a * stripes.rgb + (1.0 - stripes.a) * color;
			}
#endif

#ifdef NQVTK_RAYCASTER_LIGHTING
			// Apply lighting
			if (length(focus.normal) > 0.0) {
				color = phongShading(color, gl_NormalMatrix * focus.normal);
			}
#endif
		} else if (dynamicContext.importance > focus.importance 
			&& dynamicContext.importance > staticContext.importance) {
			// Use dynamic context mode
			color = dynamicContext.color;
			opacity = dynamicContext.opacity;
		} else {
			// Use static context mode
			color = staticContext.color;
			opacity = staticContext.opacity;
		}

		// Compute correct opacity for blending
		opacity = adjustOpacity(opacity, stepLength);

		// Accumulate colors and opacities
		accum = vec4(
			accum.a * color * opacity + accum.rgb, 
			(1.0 - opacity) * accum.a);

		// If alpha is (almost) saturated, terminate the ray
		if (accum.a < 0.001) i = numSteps + 1;

		// The last step should stay within the slab
		if (i == numSteps) {
			step = endPos - pos;
			stepLength = length(step);
		}

		// Step along the ray
		pos += step;

	} // for each step...

	// Colors are already pre-multiplied with alpha for slab compositing
	gl_FragColor = vec4(accum.rgb, 1.0 - accum.a);
}
