#extension GL_ARB_texture_rectangle : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler2DRect infoPrevious;
uniform sampler2DRect infoCurrent;
uniform int layer;
uniform float viewportX;
uniform float viewportY;

uniform sampler3D volume[4];
uniform float volumeDataShift[4];
uniform float volumeDataScale[4];
uniform vec3 volumeOrigin[4];
uniform vec3 volumeSize[4];

uniform float stepSize;

// Prototypes from LibUtility
bool getBit(float byte, int bit);

// Main shader function
void main() {
	// Get info
	vec4 r0 = gl_FragCoord;
	r0.x -= viewportX;
	r0.y -= viewportY;
	vec4 infoBefore = texture2DRect(infoPrevious, r0.xy);
	vec4 infoAfter = texture2DRect(infoCurrent, r0.xy);
	if (layer == 0) discard;

	// Discard background
	if (length(infoAfter) == 0.0) discard;

	// Raycast this slab
	vec3 startPos = infoBefore.rgb;
	vec3 endPos = infoAfter.rgb;
	vec3 ray = endPos - startPos;
	// Determine step, number of steps
	vec3 step = normalize(ray) * stepSize;
	int numSteps = int(ceil(length(ray) / stepSize));
	// Start tracing
	vec4 accum = vec4(vec3(0.0), 1.0);
	vec3 pos = startPos;
	for (int i = 0; i < numSteps; ++i) {
		float f = 0.0;
		for (int v = 0; v < 4; ++v) {
			if (getBit(infoBefore.a, v)) {
				// Adjust pos for transforms
				vec4 tpos = gl_TextureMatrixInverse[v] * vec4(pos, 1.0);
				vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[v]) / volumeSize[v];
				float val = texture3D(volume[v], p).x;
				// TODO: adjust val by volumeData{Shift,Scale}[v]
				// TODO: make combiner more flexible
				f = max(f, val); // max
				//f = f + val; // sum
				//f = f - pow(-1.0, float(v)) * val; // difference
			}
		}
		// TODO: convert to 0..1 range
		f = clamp(f, 0.0, 1.0);
		// Map to colors and opacity
		// TODO: add transfer function support
		float opacity = f;
		opacity = 1.0 - pow(1.0 - opacity, stepSize);
		vec3 color = vec3(f);
		vec4 mapped = vec4(color, opacity);
		// Accumulate
		accum = vec4(accum.a * mapped.rgb * mapped.a + accum.rgb, (1.0 - mapped.a) * accum.a);
		// Step along the ray
		pos += step;
	}

	// Colors are already pre-multiplied with alpha for slab compositing
	gl_FragColor = vec4(accum.rgb, 1.0 - accum.a);
}
