#extension GL_ARB_texture_rectangle : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler2DRect infoPrevious;
uniform sampler2DRect infoCurrent;
uniform int layer;
uniform float viewportX;
uniform float viewportY;

uniform sampler3D volume[4];
uniform float volumeDataShift[4];
uniform float volumeDataScale[4];
uniform vec3 volumeOrigin[4];
uniform vec3 volumeSize[4];

uniform float tfStart[4];
uniform float tfEnd[4];

uniform float stepSize;

// Prototypes from LibUtility
bool getBit(float byte, int bit);
vec3 phongShading(vec3 matColor, vec3 normal);

float getValue(int v, vec3 pos) {
	vec4 tpos = gl_TextureMatrixInverse[v] * vec4(pos, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[v]) / volumeSize[v];
	return texture3D(volume[v], p).x;
}

vec3 computeGradient(int v, vec3 pos, float delta, float val) {
	float dx = getValue(v, pos + vec3(delta, 0.0, 0.0)) - val;
	float dy = getValue(v, pos + vec3(0.0, delta, 0.0)) - val;
	float dz = getValue(v, pos + vec3(0.0, 0.0, delta)) - val;
	return vec3(dx, dy, dz);
}

vec4 mapValue(float f, float stepLength) {
	// TODO: add transfer function support
	float opacity = f;
	opacity = 1.0 - pow(1.0 - opacity, stepLength);
	vec3 color = vec3(f);
	return vec4(color, opacity);
}

// Main shader function
void main() {
	// Get info
	vec4 r0 = gl_FragCoord;
	r0.x -= viewportX;
	r0.y -= viewportY;
	vec4 infoBefore = texture2DRect(infoPrevious, r0.xy);
	vec4 infoAfter = texture2DRect(infoCurrent, r0.xy);
	if (layer == 0) discard;

	// Discard background
	if (length(infoAfter) == 0.0) discard;

	// Raycast this slab
	vec3 startPos = infoBefore.rgb;
	vec3 endPos = infoAfter.rgb;
	vec3 ray = endPos - startPos;
	// Determine step, number of steps
	vec3 step = normalize(ray) * stepSize;
	float stepLength = stepSize;
	int numSteps = int(ceil(length(ray) / stepSize));
	// Start tracing
	vec4 accum = vec4(vec3(0.0), 1.0);
	vec3 pos = startPos;
	for (int i = 0; i < numSteps + 1; ++i) {
		float f = 0.0;
#ifdef NQVTK_RAYCASTER_LIGHTING
		vec3 g = vec3(0.0);
#endif
		//*
		for (int v = 0; v < 4; ++v) {
			if (getBit(infoBefore.a, v)) {
				// Adjust pos for transforms
				vec4 tpos = gl_TextureMatrixInverse[v] * vec4(pos, 1.0);
				vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[v]) / volumeSize[v];
				float val = getValue(v, pos);
				// TODO: adjust val by volumeData{Shift,Scale}[v]
				// TODO: make combiner more flexible
				// TODO: implement real transfer function support, remove this hack
				float tfSize = max(tfEnd[v] - tfStart[v], 0.00001);
				val = clamp((val - tfStart[v]) / tfSize, 0.0, 1.0);
				f = max(f, val); // max
				//f = f + val; // sum
				//f = f - pow(-1.0, float(v)) * val; // difference
#ifdef NQVTK_RAYCASTER_LIGHTING
				// Accumulate gradients
				if (f == val) g = computeGradient(v, pos, stepSize, val);
				//g += computeGradient(v, pos, stepSize, val);
#endif
			}
		}
		//*/
		/* Volume IBIS Test
		vec4 col = vec4(0.0);
		if (getBit(infoBefore.a, 0) && getBit(infoBefore.a, 1)) {
			float v0 = getValue(0, pos);
			float v1 = getValue(1, pos);
			vec4 col0 = vec4(vec3(1.0, 0.9, 0.4), mapValue(v0, stepLength).a);
			vec4 col1 = vec4(vec3(0.3, 0.6, 1.0), mapValue(v1, stepLength).a);
			vec3 gmin, gmax;
			vec4 colmin, colmax;
			if (v0 > v1) {
				colmin = col1; colmax = col0;
				gmin = computeGradient(1, pos, stepSize, v1);
				gmax = computeGradient(0, pos, stepSize, v0);
			} else {
				colmin = col0; colmax = col1;
				gmin = computeGradient(0, pos, stepSize, v0);
				gmax = computeGradient(1, pos, stepSize, v1);
			}
			// Adjust outer
			colmax.a = colmax.a / 30.0;
			if (colmax.a > colmin.a) {
				col = colmax;
				g = gmax;
			} else {
				col = colmin;
				g = gmin;
			}
		} else if (getBit(infoBefore.a, 0)) {
			float v0 = getValue(0, pos);
			col = vec4(vec3(1.0, 0.9, 0.4), mapValue(v0, stepLength).a);
			// Adjust outer
			col.a = col.a / 30.0;
			g = computeGradient(0, pos, stepSize, v0);
		} else if (getBit(infoBefore.a, 1)) {
			float v1 = getValue(1, pos);
			col = vec4(vec3(0.3, 0.6, 1.0), mapValue(v1, stepLength).a);
			// Adjust outer
			col.a = col.a / 30.0;
			g = computeGradient(1, pos, stepSize, v1);
		}
		//*/
		// TODO: convert to 0..1 range from data range
		f = clamp(f, 0.0, 1.0);
		// Map to colors and opacity
		vec4 mapped = mapValue(f, stepLength);
		//mapped = col;
#ifdef NQVTK_RAYCASTER_LIGHTING
		// Lighting
		// TODO: lighting should probably depend on opacity
		// TODO: use mapped opacity volume to compute normals?
		// TODO: normals should take slab boundaries into account
		if (length(g) > 0.0) {
			vec3 n = gl_NormalMatrix * normalize(-g);
			mapped = vec4(phongShading(mapped.rgb, n), mapped.a);
		}
#endif
		// Accumulate
		accum = vec4(accum.a * mapped.rgb * mapped.a + accum.rgb, (1.0 - mapped.a) * accum.a);
		// If alpha is (almost) saturated, terminate the ray
		if (accum.a < 0.001) i = numSteps + 1;
		// The last step should stay within the slab
		if (i == numSteps) {
			step = endPos - pos;
			stepLength = length(step);
		}
		// Step along the ray
		pos += step;
	}

	// Colors are already pre-multiplied with alpha for slab compositing
	gl_FragColor = vec4(accum.rgb, 1.0 - accum.a);
}
