#extension GL_ARB_texture_rectangle : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler2DRect infoPrevious;
uniform sampler2DRect infoCurrent;
uniform int layer;
uniform float viewportX;
uniform float viewportY;

uniform sampler3D volume[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataShift[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataScale[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeOrigin[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSize[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSpacing[NQVTK_RAYCASTER_VOLUMECOUNT];

uniform float tfStart[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float tfEnd[NQVTK_RAYCASTER_VOLUMECOUNT];

uniform float stepSize;
uniform float kernelSize;

// Prototypes from LibUtility
bool getBit(float byte, int bit);
vec3 phongShading(vec3 matColor, vec3 normal);

struct sample {
	float value;
	vec3 color;
};

// Get color, value from volume
sample sampleVolume(int v, vec3 pos) {
	sample s;
	vec4 tpos = gl_TextureMatrixInverse[v] * vec4(pos, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[v]) / volumeSize[v];
	s.value = texture3D(volume[v], p).x;
	// TODO: adjust val by volumeData{Shift,Scale}[v]
	s.color = vec3(1.0) * s.value;
	return s;
}

// Get value from volume
float getValue(int v, vec3 pos) {
	return sampleVolume(v, pos).value;
}

// Compute gradient of the volume
vec3 computeGradient(int v, vec3 pos, float delta, float val) {
#ifdef NQVTK_RAYCASTER_CENTRALDIFFERENCES
	float dx = (getValue(v, pos + vec3(0.5 * delta, 0.0, 0.0)) - 
		getValue(v, pos - vec3(0.5 * delta, 0.0, 0.0))) / delta;
	float dy = (getValue(v, pos + vec3(0.0, 0.5 * delta, 0.0)) - 
		getValue(v, pos - vec3(0.0, 0.5 * delta, 0.0))) / delta;
	float dz = (getValue(v, pos + vec3(0.0, 0.0, 0.5 * delta)) - 
		getValue(v, pos - vec3(0.0, 0.0, 0.5 * delta))) / delta;
#else
	float dx = (getValue(v, pos + vec3(delta, 0.0, 0.0)) - val) / delta;
	float dy = (getValue(v, pos + vec3(0.0, delta, 0.0)) - val) / delta;
	float dz = (getValue(v, pos + vec3(0.0, 0.0, delta)) - val) / delta;
#endif
	return vec3(dx, dy, dz);
}

// Adjust opacity for step length
float adjustOpacity(float val, float stepLength) {
	return 1.0 - pow(1.0 - val, stepLength);
}

// Main shader function
void main() {
	// Get info
	vec4 r0 = gl_FragCoord;
	r0.x -= viewportX;
	r0.y -= viewportY;
	vec4 infoBefore = texture2DRect(infoPrevious, r0.xy);
	vec4 infoAfter = texture2DRect(infoCurrent, r0.xy);
	if (layer == 0) discard;

	// Discard background
	if (length(infoAfter) == 0.0) discard;

	// Raycast this slab
	vec3 startPos = infoBefore.rgb;
	vec3 endPos = infoAfter.rgb;
	vec3 ray = endPos - startPos;
#ifdef NQVTK_RAYCASTER_DITHERPOS
	// Offset rays to reduce stepping artifacts
	float offset = abs(mod(r0.y, 4.0) - mod(r0.x, 4.0)) * 0.25 * stepSize;
	startPos += offset * normalize(ray);
#endif
	// Determine step, number of steps
	vec3 step = normalize(ray) * stepSize;
	float stepLength = stepSize;
	int numSteps = int(ceil(length(ray) / stepSize));
	// Start tracing
	vec4 accum = vec4(vec3(0.0), 1.0);
	vec3 pos = startPos;
	// For each step along the ray...
	for (int i = 0; i < numSteps + 1; ++i) {
		for (int v = 0; v < NQVTK_RAYCASTER_VOLUMECOUNT; ++v) {
			// If the volume is active, sample it
			if (getBit(infoBefore.a, v)) {
				sample s = sampleVolume(v, pos);

				// Apply the volume's transfer function
				// TODO: implement real transfer function support, remove this hack
				float tfSize = max(tfEnd[v] - tfStart[v], 0.00001);
				float opacity = clamp((s.value - tfStart[v]) / tfSize, 0.0, 1.0);

#ifdef NQVTK_RAYCASTER_LIGHTING
				// TODO: maybe we should compute gradients from the combined volumes?
				vec3 gradient = computeGradient(v, pos, kernelSize, s.value);
				// Light this sample with this volume's gradient
				// TODO: normals should take slab boundaries into account
				//       ...but only in some cases (clipping planes!)
				if (length(gradient) > 0.0) {
					vec3 normal = normalize(gl_NormalMatrix * -gradient);
					s.color = phongShading(s.color, normal);
				}
#endif

				// Compute correct opacity for blending
				opacity = adjustOpacity(opacity, stepLength);

				// Accumulate colors and opacities
				accum = vec4(
					accum.a * s.color * opacity + accum.rgb, 
					(1.0 - opacity) * accum.a);
			}
		}

		/* Volume IBIS Test
		// TODO: move to separate shader?
		vec4 col = vec4(0.0);
		if (getBit(infoBefore.a, 0) && getBit(infoBefore.a, 1)) {
			float v0 = getValue(0, pos);
			float v1 = getValue(1, pos);
			vec4 col0 = vec4(vec3(1.0, 0.9, 0.4), mapValue(v0, stepLength).a);
			vec4 col1 = vec4(vec3(0.3, 0.6, 1.0), mapValue(v1, stepLength).a);
			vec3 gmin, gmax;
			vec4 colmin, colmax;
			if (v0 > v1) {
				colmin = col1; colmax = col0;
				gmin = computeGradient(1, pos, kernelSize, v1);
				gmax = computeGradient(0, pos, kernelSize, v0);
			} else {
				colmin = col0; colmax = col1;
				gmin = computeGradient(0, pos, kernelSize, v0);
				gmax = computeGradient(1, pos, kernelSize, v1);
			}
			// Adjust outer
			colmax.a = colmax.a / 30.0;
			if (colmax.a > colmin.a) {
				col = colmax;
				g = gmax;
			} else {
				col = colmin;
				g = gmin;
			}
		} else if (getBit(infoBefore.a, 0)) {
			float v0 = getValue(0, pos);
			col = vec4(vec3(1.0, 0.9, 0.4), mapValue(v0, stepLength).a);
			// Adjust outer
			col.a = col.a / 30.0;
			g = computeGradient(0, pos, stepSize, v0);
		} else if (getBit(infoBefore.a, 1)) {
			float v1 = getValue(1, pos);
			col = vec4(vec3(0.3, 0.6, 1.0), mapValue(v1, stepLength).a);
			// Adjust outer
			col.a = col.a / 30.0;
			g = computeGradient(1, pos, stepSize, v1);
		}
		//*/

		// If alpha is (almost) saturated, terminate the ray
		if (accum.a < 0.001) i = numSteps + 1;
		// The last step should stay within the slab
		if (i == numSteps) {
			step = endPos - pos;
			stepLength = length(step);
		}
		// Step along the ray
		pos += step;
	}

	// Colors are already pre-multiplied with alpha for slab compositing
	gl_FragColor = vec4(accum.rgb, 1.0 - accum.a);
}
