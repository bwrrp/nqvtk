#extension GL_ARB_texture_rectangle : enable
#extension GL_ARB_draw_buffers : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler2DRectShadow depthBuffer;
uniform sampler2DRect infoBuffer;
uniform int layer;
uniform int objectId;

uniform sampler3D distanceField;
//uniform bool hasDistanceField;
uniform float distanceFieldDataShift;
uniform float distanceFieldDataScale;
uniform vec3 distanceFieldOrigin;
uniform vec3 distanceFieldSize;

varying vec4 pos;

// Prototypes from LibUtility
float setBit(float byte, int bit, bool on);
bool getBit(float byte, int bit);

// Shader main function
void main() {
	vec4 r0 = gl_FragCoord;

	// Depth peeling
	if (layer > 0) {
		float r1 = shadow2DRect(depthBuffer, r0.xyz).x;
		r1 = r1 - 0.5;
		if (r1 < 0.0) { discard; }
	}

	// Get the previous info buffer
	vec4 infoBefore = vec4(0.0);
	if (layer > 0) {
		infoBefore = texture2DRect(infoBuffer, r0.xy);
	}

	// Coplanarity peeling
	float inOutMask = infoBefore.w;
	if (getBit(inOutMask, objectId) == gl_FrontFacing) {
		discard;
	}

	// Update in-out mask
	if (objectId >= 0) {
		inOutMask = setBit(inOutMask, objectId, gl_FrontFacing);
	}

	// Store the position and in-out mask
	gl_FragData[0] = vec4(pos.xyz / pos.w, inOutMask);
}
