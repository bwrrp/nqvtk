#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler3D volume;
uniform vec3 volumeDims;
uniform vec3 volumeSpacing;
uniform float volumeDataShift;
uniform float volumeDataScale;
uniform int slice;

// Parameters
uniform float scale;
uniform float outDataShift;
uniform float outDataScale;

vec4 getSample(vec3 pos)
{
	// Compute the position in the input volume texture
	vec3 p = pos / volumeDims;
	return vec4(volumeDataShift) + volumeDataScale * texture3D(volume, p);
}

// Linear Jacobian
mat3 jacobian(vec3 pos) {
	vec3 dx = (getSample(pos + vec3(1.0, 0.0, 0.0)).xyz - 
		getSample(pos - vec3(1.0, 0.0, 0.0)).xyz) / volumeSpacing.x;
	vec3 dy = (getSample(pos + vec3(0.0, 1.0, 0.0)).xyz - 
		getSample(pos - vec3(0.0, 1.0, 0.0)).xyz) / volumeSpacing.y;
	vec3 dz = (getSample(pos + vec3(0.0, 0.0, 1.0)).xyz - 
		getSample(pos - vec3(0.0, 0.0, 1.0)).xyz) / volumeSpacing.z;
	
	// Add identity (because we should have used pos + vec instead of vec)
	return mat3(dx, dy, dz) + mat3(1.0);
}

// Compute determinant of matrix
float determinant(mat3 m) {
	return m[0][0] * m[1][1] * m[2][2] 
		+ m[0][1] * m[1][2] * m[2][0] 
		+ m[0][2] * m[1][0] * m[2][1] 
		- m[0][2] * m[1][1] * m[2][0] 
		- m[0][1] * m[1][0] * m[2][2] 
		- m[0][0] * m[1][2] * m[2][1];
}

// Main shader function
void main()
{
	vec3 pos = vec3(gl_FragCoord.xy, float(slice) + 0.5);
	
	// TODO: implement jacobian determinant computation for four slices
	// TODO: figure out how to deal with output shift/scale
	// TODO: compute growth measure instead?
	
	// Compute the jacobians
	for (int i = 0; i < 4; ++i)
	{
		mat3 jacobian = jacobian(vec3(pos.xy, pos.z + float(i)));
		float detJ = determinant(jacobian);
		
		// Compute growth measure
		float g = 0.0;
		if (detJ > 1.0) 
			g = 1.0 - (1.0 / detJ);
		else
			g = detJ - 1.0;
		
		gl_FragData[i] = vec4((g - outDataShift) / outDataScale);
	}
}
