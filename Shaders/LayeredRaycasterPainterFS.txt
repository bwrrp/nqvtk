#extension GL_ARB_texture_rectangle : enable
#ifdef GL_EXT_gpu_shader4
#extension GL_EXT_gpu_shader4 : enable
#endif

uniform sampler2DRect infoPrevious;
uniform sampler2DRect infoCurrent;
uniform sampler2DRect normals;
uniform sampler2DRect colors;

uniform int layer;
uniform float viewportX;
uniform float viewportY;
uniform vec3 cameraPos;

uniform sampler3D volume[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataShift[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float volumeDataScale[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeOrigin[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSize[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform vec3 volumeSpacing[NQVTK_RAYCASTER_VOLUMECOUNT];

uniform float tfStart[NQVTK_RAYCASTER_VOLUMECOUNT];
uniform float tfEnd[NQVTK_RAYCASTER_VOLUMECOUNT];

uniform float testParam;

uniform float occlusionEdgeThreshold;
uniform float cornerEdgeThreshold;

// Prototypes from LibUtility
vec3 phongShading(vec3 matColor, vec3 normal);
bool getBit(float byte, int bit);

float stripes(float f, int size, int part) {
	return int(f) % size < part ? 0.0 : 1.0;
}

float plusTexture(vec2 c) {
	return 1.0 - stripes(c.x, 20, 8) * stripes(c.y, 20, 8) * 
		(1.0 - stripes(c.x + 8.0, 20, 4) * stripes(c.y + 8.0, 20, 4));
}

float stripeTexture(vec2 c) {
	return stripes(abs(c.x + c.y), 20, 8);
}

float dotTexture(vec2 c) {
	return length(mod(c, 20.0) - vec2(10.0)) < 5.0 ? 0.0 : 1.0;
}

bool ignoreObject(int id) {
	return id < NQVTK_RAYCASTER_VOLUMECOUNT;
}

void main() {
	// Get info
	vec4 r0 = gl_FragCoord;
	r0.x -= viewportX;
	r0.y -= viewportY;
	vec4 infoBefore = texture2DRect(infoPrevious, r0.xy);
	if (layer == 0) infoBefore = vec4(0.0);
	vec4 infoAfter = texture2DRect(infoCurrent, r0.xy);
	vec4 normalid = texture2DRect(normals, r0.xy);
	vec3 normal = normalize(normalid.rgb);
	float gm = length(normalid.rgb);
	int id = int(normalid.a) - 1;
	vec4 color = texture2DRect(colors, r0.xy);

	// Some extra coloring effects for volume features
	if (length(infoBefore) > 0.0) {
		if (id == 2) color.rgb = vec3(1.0, 0.5, 0.0);
		if (id == 3) color.rgb = vec3(0.0, 0.5, 1.0);
		if ((getBit(infoBefore.a, 2) && getBit(infoBefore.a, 3)) != 
			(getBit(infoAfter.a, 2) && getBit(infoAfter.a, 3))) {
			color.a = 1.0;
		} else if (id == 2 || id == 3) {
			color.rgb = mix(color.rgb, vec3(1.0), 0.5);
		}
	}

	// Simple lighting
	if (gm > 0.0) color = vec4(phongShading(color.rgb, normal), color.a);

	// Test: screen-space textures for visualizing ids
	/*
	if (id == 2) {
		color.rgb *= (0.5 + 0.5 * stripeTexture(r0.xy));
	} else if (id == 3) {
		color.rgb *= (0.5 + 0.5 * plusTexture(r0.xy));
	}
	*/

	// Test: vector direction visualization
	vec4 tpos = gl_TextureMatrixInverse[0] * vec4(infoAfter.rgb, 1.0);
	vec3 p = ((tpos.xyz / tpos.w) - volumeOrigin[0]) / volumeSize[0];
	vec3 dir = vec3(volumeDataShift[0]) + volumeDataScale[0] * texture3D(volume[0], p).xyz;
	dir = gl_NormalMatrix * normalize(dir);
	vec2 d = dir.xy; 
	//vec2 d = (dir - dot(dir, normal) * normal).xy;
	//* Smearing
	int n = 0;
	float f = 0.0;
	for (int i = 0; i < int(100.0 * testParam); ++i) {
		vec2 tc = r0.xy + float(i - 25) * d;
		f += dotTexture(tc);
		++n;
	}
	f /= float(n);
	color.rgb *= f;
	//*/
	/* Striping with orthogonality threshold
	vec2 d2 = vec2(-d.y, d.x);
	float f = mod(dot(r0.xy, normalize(d2)), 20.0) < 6.0 ? 0.0 : 1.0;
	//if (length(d) < abs(dir.z) * testParam) f = dotTexture(r0.xy);
	if (abs(dot(dir, normal)) > testParam) f = dotTexture(r0.xy);
	color.rgb *= (0.5 + 0.5 * f);
	//*/

	// Apply contouring
	const int NB_SIZE = 4;
	vec2 nb[NB_SIZE];
	nb[0] = vec2(r0.x - 1.0, r0.y);
	nb[1] = vec2(r0.x + 1.0, r0.y);
	nb[2] = vec2(r0.x, r0.y - 1.0);
	nb[3] = vec2(r0.x, r0.y + 1.0);
	// Collect samples
	int nbIds[NB_SIZE];
	vec3 nbNormals[NB_SIZE];
	vec3 nbPos[NB_SIZE];
	for (int i = 0; i < NB_SIZE; ++i) {
		vec4 normalid = texture2DRect(normals, nb[i]);
		nbIds[i] = int(normalid.a) - 1;
		nbNormals[i] = normalid.rgb;
		nbPos[i] = texture2DRect(infoCurrent, nb[i]).rgb;
	}
	// Detect silhouettes
	bool silhouette = false;
	bool ignoreSilhouette = true;
	vec3 viewDir = normalize(infoAfter.rgb - cameraPos);
	for (int i = 0; i < NB_SIZE; ++i) {
		// TODO: these positions are not refined surface hits!
		vec3 posdiff = nbPos[i] - infoAfter.rgb;
		// Background contains 0 positions and needs special care
		bool bgsil = id < 0 ^^ nbIds[i] < 0;
		if (length(posdiff) > occlusionEdgeThreshold || bgsil) {
			silhouette = true;
			// Determine frontmost
			// Note that id and nbIds[i] can't both be background
			int frontmost;
			if ((!bgsil && dot(viewDir, posdiff) > 0.0) || (bgsil && id >= 0)) {
				frontmost = id;
			} else {
				frontmost = nbIds[i];
			}
			// Ignore silhouette if all frontmost objects are ignored
			ignoreSilhouette = ignoreSilhouette && ignoreObject(frontmost);
		}
	}
	if (silhouette) {
		if (!ignoreSilhouette) color = vec4(0.0, 0.0, 0.0, 1.0);
	} else {
		bool intersection = false;
		bool ignoreIntersection = true;
		for (int i = 0; i < NB_SIZE; ++i) {
			if (nbIds[i] != id) {
				intersection = true;
				// Ignore intersection if the object is ignored
				ignoreIntersection = ignoreIntersection && ignoreObject(nbIds[i]);
			}
		}
		// Also ignore intersections if the current object is ignored
		ignoreIntersection = ignoreIntersection || ignoreObject(id);
		if (intersection) {
			if (!ignoreIntersection) color = vec4(0.0, 0.0, 0.3, 1.0);
		} else {
			// All ids are the same, only draw corners if the object is not ignored
			if (!ignoreObject(id)) {
				// Detect corners
				bool corner = false;
				for (int i = 0; i < NB_SIZE; ++i) {
					if (abs(dot(normalize(nbNormals[i]), normal)) < 
						cornerEdgeThreshold) {
						corner = true;
					}
				}
				if (corner) {
					color = vec4(0.0, 0.3, 0.0, 1.0);
				}
			}
		}
	}

	// Premultiply colors
	gl_FragColor = vec4(color.rgb * color.a, color.a);
}
