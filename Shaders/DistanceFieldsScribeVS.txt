#define NQVTK_USE_SHADOWMAP
#define NQVTK_USE_PVALS
uniform float farPlane;
uniform float nearPlane;
uniform int objectId;

// For shadow mapping
#ifdef NQVTK_USE_SHADOWMAP
uniform float shadowNearPlane;
uniform float shadowFarPlane;
uniform mat4 shadowMVM;
uniform mat4 shadowPM;
varying vec4 shadowCoord;
varying float depthInShadow;
#endif

#ifdef NQVTK_USE_PVALS
attribute float pvals;
varying float pvalue;
#endif

// Varyings
varying vec4 vertex;
varying vec3 normal;
varying vec4 color;
varying float depthInCamera;

// Shader main function
void main() {
	// HACK: find a better way to pass these transforms
	vertex = gl_TextureMatrixInverse[1 - objectId] * gl_TextureMatrix[objectId] * gl_Vertex;
	normal = normalize(gl_NormalMatrix * gl_Normal);
	color = gl_Color;
	vec4 pos = gl_ModelViewMatrix * gl_Vertex;
	float depthRange = (farPlane - nearPlane);
	depthInCamera = (-pos.z / pos.w - nearPlane) / depthRange;
	gl_Position = gl_ProjectionMatrix * pos;
	gl_TexCoord[0] = gl_MultiTexCoord0;

#ifdef NQVTK_USE_SHADOWMAP
	shadowCoord = gl_TextureMatrix[3] * gl_ModelViewMatrix * gl_Vertex;
	vec4 shadowPos = shadowMVM * gl_TextureMatrix[objectId] * gl_Vertex;
	float shadowDepthRange = (shadowFarPlane - shadowNearPlane);
	depthInShadow = (-shadowPos.z / shadowPos.w - shadowNearPlane) / shadowDepthRange;
#endif

#ifdef NQVTK_USE_PVALS
	pvalue = pvals;
#endif
}
